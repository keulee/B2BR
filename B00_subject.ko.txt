Mandatory Part
이 과제에서는 특정 규칙을 따라 여러분의 첫 서버를 셋업하게 됩니다.

! 주의 !
서버를 설정해야함에 있어, 최소한의 서비스만 설치하면 됩니다. 이런 이유로, 그래픽 인터페이스는 이 과제에서 사용되지 않습니다.
따라서 X.org 또는 기타 동등한 그래픽 서버를 설치하는 것은 금지돼 있습니다. 이를 따르지 않을 경우, 점수는 0점 처리 됩니다.

운영체제 선택 시 안정성이 보장된 최신 버전의 Debian(테스팅 중이거나 불안정 버전 제외) 또는 안정성이 보장된 CentOS를 선택해야 합니다.
시스템 관리가 처음이라면 Debian을 적극 권장합니다.

! 참고 !
CentOS 설정은 꽤 복잡합니다. 따라서, KDump를 설정하지 않아도 됩니다.
하지만, SELinux는 시작 시 실행중이어야 하며 해당 설정은 과제에서 요구하는 것에 맞게 조정돼야 합니다.
Debian의 AppArmor역시 시작 시 실행중이어야 합니다.

여러분은 LVM을 사용해 적어도 2개의 암호회된 파티션을 생성해야 합니다. 

! 참고 !
동료 평가 시, 선택한 운영체제에 대한 질문을 받게 됩니다. 
예를 들어, aptitude와 apt의 차이에 대해 알고 있어야 하거나, SELinux 또는 AppArmor가 무엇인지 대답할 수 있어야 합니다.
다시 말해, 사용한 운영체제를 이해하고 있어야 합니다.

SSH service는 4242 포트에서만 작동돼야 합니다. 보안상의 이유로, SSH를 루트로 사용하여 연결해선 안됩니다.

! 참고 !
SSH 사용은 동료 평가 시 새로운 계정을 만들면서 시험해보게 됩니다. 따라서 그것이 어떻게 작동하는지에 대해 이해하고 있어야 합니다.

운영체제 구성 시 UFW 방화벽을 사용해야하므로 4242 포트만 열어두어야 합니다.

! 참고 !
방화벽은 가상머신을 작동시킬 때 활성화되어야 합니다. 
CentOS의 경우, 기본 방화벽 대신 UFW를 사용해야 합니다. 이를 설치하기 위해서는 DNF가 필요할 수 있습니다.

# 가상머신의 hostname은 당신의 로그인 + 42로 구성 되어야 합니다. (예. wil42). 동료 평가 시 hostname을 변경하게 됩니다.
# 강력한 암호 정책을 구현해야 합니다.
# 엄격한 규칙에 따라 sudo를 설치하고 구성해야 합니다.
# root 사용자 외에, 당신의 로그인을 username으로 가진 사용자가 있어야 합니다.
# 이 사용자는 user42와 sudo 그룹에 속해있어야 합니다.

! 참고 !
동료 평가 시, 새로운 사용자를 생성하고 그룹에 할당해야 합니다.

강력한 암호 정책 설정을 위해, 다음 요구 사항을 준수해야 합니다.
# 비밀번호는 30일마다 만료되어야 합니다.
# 비밀번호 수정까지 허용되는 최소 일수는 2로 설정합니다.
# 비밀번호는 최소 10자 이상, 대문자 및 숫자를 포함해야 합니다. 또한 3개 이상 연속해서 같은 문자를 포함할 수 없습니다.
# 비밀번호에는 사용자의 이름이 포함되지 않아야 합니다.
# 위의 규칙들은 root 암호에는 적용되지 않습니다. root 암호는 최소 7자 이상이며 이전 암호(사용한 암호)를 포함하면 안됩니다.
# root 암호 역시 위 규칙을 준수해야 합니다.

! 주의 !
구성 파일을 설정한 후에는, root 계정을 포함해 가상 머신에 있는 계정의 모든 암호를 변경해야 합니다.

sudo 그룹에 강력한 구성을 설정하려면, 다음 요구 사항을 준수해야 합니다.
# sudo를 사용한 인증은 비밀번호가 올바르지 않은 경우 3번까지 가능하도록 제한해야 합니다.
# sudo를 사용할 때 잘못된 암호 입력으로 오류가 발생하면 선택에 따라 지정된 메시지가 출력돼야 합니다.
# sudo를 사용하는 모든 작업은 입력input과 출력output, 모두에서 보관되어야 합니다.
# 로그 파일은 /var/log/sudo/ 폴더에 저장해야 합니다.
# 보안상의 이유로 TTY 모드 활성화가 필요합니다.
# 역시나 보안상의 이유로, sudo가 사용할 수 있는 경로를 제한해야 합니다. (예, /usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/bin:/snap/bin)

마지막으로, monitoring.sh라는 간단한 스크립트를 만들어야합니다. bash로 만들어져야 합니다.

서버 시작 시, 스크립트는 10분마다 모든 터미널에 몇몇 정보들(아래)을 표시합니다(wall을 참조하세요).
배너는 선택 사항입니다. 오류가 표시되지 않아야 합니다.
# 운영 체제의 아키텍처 및 해당 커널 버전
# 물리적 프로세서의 수
# 가상 프로세서의 수
# 서버의 현재 사용가능한 RAM 및 사용율 (백분율)
# 서버의 현재 사용 가능한 메모리 및 사용률 (백분율)
# 프로세서의 현재 사용률 (백분율)
# 마지막 재부팅 날짜 및 시간
# LVM 활성 상태 여부
# 활성 연결 수
# 서버 사용자 수
# 서버의 IPv4 주소 및 해당 MAC(Media Access Control)주소
# sudo 프로그램으로 실행된 명령의 수

! 참고 !
동료 평가 시, 여러분의 스크립트가 어떻게 실행되고 있는지에 대해 설명해야 합니다.
스크립트를 수정하지 않으면서 스크립트를 중단할 수 있어야 합니다. cron을 살펴보세요.

Bonus Part
보너스 목록:
# 예시 그림과 같은 구조를 만들 수 있도록 적절히 파티션을 구성하세요.
# lighttpd, MariaDB 및 PHP 서비스를 사용하여 구동하는 WordPress 웹사이트를 만듭니다.
# 유용하다고 생각되는 서비스를 선택해 설정합니다. 동료 평가 동안 서비스 선택에 대한 이유를 설명합니다.

! 참고 !
보너스 파트를 완료하기 위해 추가 서비스를 설정할 수 있습니다.
이 경우 필요에 맞게 더 많은 포트를 열 수 있습니다. 물론 UFW 규칙은 그에 따라 조정되어야 합니다.

! 주의 !
필수 과제가 완벽한 경우에만 보너스 파트가 평가됩니다. 필수 부분이 완벽하게 수행되어 오작동 없이 작동을 해야지만 완벽한 경우에 해당됩니다.
필수 과제의 모든 부분에서 통과하지 못한 경우 보너스 부분은 평가받을 수 없습니다.

git repo의 root에 signature.txt 파일만 제출합니다. 이 txt파일에는 컴퓨터 가상 디스크 서명을 저장해둡니다. 
이 서명을 얻기 위해서는 우선 기본 설치 폴더를 열어야 합니다. (vm이 저장된 폴더입니다)
# Windows: %HOMEDRIVE%%HOMEPATH%\VirtualBox VMs\
# Linux: ~/VirtualBox VMs/
# MacM1: ~/Library/Containers/com.utmapp.UTM/Data/Documents/
# MacOS: ~/VirtualBox VMs/

이후 가상 머신의 ".vdi" 파일 (UTM 사용자의 경우 ".qcow2")에서 서명을 sha1 형식으로 검색합니다.
다음은 centos_serv.vdi 파일에 대한 4가지 명령 예시입니다.
# Windows: certUtil -hashfile centos_serv.vdi sha1
# Linux: sha1sum centos_serv.vdi
# For Mac M1: shasum Centos.utm/Images/disk-0.qcow2
# MacOS: shasum centos_serv.vdi

여러분이 얻게 될 결과물은 아래와 같은 모습을 하고 있습니다.
# 6e657c4619944be17df3c31faa030c25e43e40af

! 참고 !
가상 머신의 서명은 첫 평가 후 변경될 수 있습니다.
이 문제를 해결하기 위해 가상 머신을 복제하거나 상태 저장을 사용할 수 있습니다.

! 주의 !
git repo에서 당신의 가상 머신을 켜는 것은 당연히 금지되어 있습니다.
동료 평가 시, signature.txt 파일의 서명은 가상 머신의 서명과 비교됩니다.
두 서명이 동일하지 않을 경우 0점으로 평가됩니다.